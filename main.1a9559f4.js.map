{"version":3,"sources":["main.js"],"names":["container","document","querySelector","initialColor","newColor","grid","rows","columns","totalCells","randomColor","Math","random","toString","slice","isPowerOf3","i","colorNotInitial","initColor","cellColor","convertToRGB","color","r","parseInt","g","b","randomizeCellColor","createGrid","cellsAmount","parent","createCell","style","setProperty","cell","createElement","textContent","classList","add","backgroundColor","value","appendChild","cells","querySelectorAll","changeCellColor","event","changedColor","target","forEach","addEventListener"],"mappings":";AAAA,aAEA,IAAMA,EAAYC,SAASC,cAAc,cACnCC,EAAeF,SAASC,cAAc,YACtCE,EAAWH,SAASC,cAAc,QAElCG,EAAO,CACXC,KAAM,GACNC,QAAS,IAGLC,EAAaH,EAAKC,KAAOD,EAAKE,QAE9BE,EAAc,WAAM,MAAA,IAAOC,KAAKC,SAASC,SAAS,IAAIC,OAAO,IAE7DC,EAAa,SAACC,GAAM,OAAA,YAAcA,EAAI,IAAO,GAAW,IAANA,GAElDC,EAAkB,SAACC,GAGhBC,IAFHA,IAAAA,EAAYT,IAETS,IAAcD,GACnBC,EAAYT,IAGPS,OAAAA,GAGHC,EAAe,SAACC,GACdC,IAAAA,EAAIC,SAASF,EAAMP,MAAM,EAAG,GAAI,IAChCU,EAAID,SAASF,EAAMP,MAAM,EAAG,GAAI,IAChCW,EAAIF,SAASF,EAAMP,MAAM,EAAG,GAAI,IAExBQ,MAAAA,OAAAA,OAAAA,EAAME,MAAAA,OAAAA,EAAMC,MAAAA,OAAAA,EAA1B,MAGIC,EAAqB,SAACV,EAAGE,GACzBH,OAAAA,EAAWC,GACNE,EAGFD,EAAgBC,IAKzB,SAASS,EAAWC,EAAaC,EAAQrB,GAClC,IAAA,IAAIQ,EAAI,EAAGA,EAAIY,EAAaZ,IAC/Bc,EAAWd,EAAGa,GAGhBA,EAAOE,MACJC,YAA+CxB,wBAAAA,UAAAA,OAAAA,EADlD,WAIF,SAASsB,EAAWd,EAAGa,GACfI,IAAAA,EAAO/B,SAASgC,cAAc,OAM7BL,OAJPI,EAAKE,YAAiBnB,GAAAA,OAAAA,EAAI,GAC1BiB,EAAKG,UAAUC,IAAI,QACnBJ,EAAKF,MAAMO,gBAAkBZ,EAAmBV,EAAGZ,EAAamC,OAEzDV,EAAOW,YAAYP,GAlB5BN,EAAWlB,EAAYR,EAAWK,EAAKE,SAqBvC,IAAMiC,EAAQvC,SAASwC,iBAAiB,SAExC,SAASC,EAAgBC,EAAO5B,EAAGE,EAAW2B,GACxC9B,EAAWC,GACT4B,EAAME,OAAOf,MAAMO,kBAAoBlB,EAAaF,GACtD0B,EAAME,OAAOf,MAAMO,gBAAkBO,EAErCD,EAAME,OAAOf,MAAMO,gBAAkBpB,EAGvC0B,EAAME,OAAOf,MAAMO,gBAAkBrB,EAAgBC,GAIzDuB,EAAMM,QAAQ,SAACd,EAAMjB,GACnBiB,EAAKe,iBAAiB,QAAS,SAACJ,GAC9BD,EAAgBC,EAAO5B,EAAGZ,EAAamC,MAAOlC,EAASkC,WAI3DnC,EAAa4C,iBAAiB,SAAU,SAACJ,GACvCH,EAAMM,QAAQ,SAACd,EAAMjB,GACfD,EAAWC,KACbiB,EAAKF,MAAMO,gBAAkBM,EAAME,OAAOP","file":"main.1a9559f4.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst container = document.querySelector('.container');\nconst initialColor = document.querySelector('#initial');\nconst newColor = document.querySelector('#new');\n\nconst grid = {\n  rows: 16,\n  columns: 16,\n};\n\nconst totalCells = grid.rows * grid.columns;\n\nconst randomColor = () => '#' + (Math.random().toString(16).slice(-6));\n\nconst isPowerOf3 = (i) => 1162261467 % (i + 1) === 0 && i !== 0;\n\nconst colorNotInitial = (initColor) => {\n  let cellColor = randomColor();\n\n  while (cellColor === initColor) {\n    cellColor = randomColor();\n  }\n\n  return cellColor;\n};\n\nconst convertToRGB = (color) => {\n  const r = parseInt(color.slice(1, 3), 16);\n  const g = parseInt(color.slice(3, 5), 16);\n  const b = parseInt(color.slice(5, 7), 16);\n\n  return `rgb(${r}, ${g}, ${b})`;\n};\n\nconst randomizeCellColor = (i, initColor) => {\n  if (isPowerOf3(i)) {\n    return initColor;\n  }\n\n  return colorNotInitial(initColor);\n};\n\ncreateGrid(totalCells, container, grid.columns);\n\nfunction createGrid(cellsAmount, parent, columns) {\n  for (let i = 0; i < cellsAmount; i++) {\n    createCell(i, parent);\n  }\n\n  parent.style\n    .setProperty(`grid-template-columns`, `repeat(${columns}, 1fr)`);\n}\n\nfunction createCell(i, parent) {\n  const cell = document.createElement('div');\n\n  cell.textContent = `${i + 1}`;\n  cell.classList.add('cell');\n  cell.style.backgroundColor = randomizeCellColor(i, initialColor.value);\n\n  return parent.appendChild(cell);\n}\n\nconst cells = document.querySelectorAll('.cell');\n\nfunction changeCellColor(event, i, initColor, changedColor) {\n  if (isPowerOf3(i)) {\n    if (event.target.style.backgroundColor === convertToRGB(initColor)) {\n      event.target.style.backgroundColor = changedColor;\n    } else {\n      event.target.style.backgroundColor = initColor;\n    }\n  } else {\n    event.target.style.backgroundColor = colorNotInitial(initColor);\n  }\n}\n\ncells.forEach((cell, i) => {\n  cell.addEventListener('click', (event) => {\n    changeCellColor(event, i, initialColor.value, newColor.value);\n  });\n});\n\ninitialColor.addEventListener('change', (event) => {\n  cells.forEach((cell, i) => {\n    if (isPowerOf3(i)) {\n      cell.style.backgroundColor = event.target.value;\n    }\n  });\n});\n"]}